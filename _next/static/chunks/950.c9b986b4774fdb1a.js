"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[950],{54950:function(e,t,n){n.r(t),n.d(t,{config:function(){return i},errors:function(){return r},fromDataTransfer:function(){return a},getDirHandlesFromInput:function(){return o},getFileHandlesFromInput:function(){return s}});let r={INVALID:["seeking position failed.","InvalidStateError"],GONE:["A requested file or directory could not be found at the time an operation was processed.","NotFoundError"],MISMATCH:["The path supplied exists, but was not an entry of requested type.","TypeMismatchError"],MOD_ERR:["The object can not be modified in this way.","InvalidModificationError"],SYNTAX:e=>[`Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. ${e}`,"SyntaxError"],SECURITY:["It was determined that certain files are unsafe for access within a Web application, or that too many calls are being made on file resources.","SecurityError"],DISALLOWED:["The request is not allowed by the user agent or the platform in the current context.","NotAllowedError"]},i={writable:globalThis.WritableStream};async function a(e){console.warn("deprecated fromDataTransfer - use `dt.items[0].getAsFileSystemHandle()` instead");let[t,r,i]=await Promise.all([n.e(871).then(n.bind(n,20871)),n.e(481).then(n.bind(n,78481)),Promise.resolve().then(n.bind(n,54022))]),a=new t.FolderHandle("",!1);return a._entries=e.map(e=>e.isFile?new r.FileHandle(e,!1):new r.FolderHandle(e,!1)),new i.FileSystemDirectoryHandle(a)}async function o(e){let{FolderHandle:t,FileHandle:r}=await n.e(871).then(n.bind(n,20871)),{FileSystemDirectoryHandle:i}=await Promise.resolve().then(n.bind(n,54022)),a=Array.from(e.files),o=a[0].webkitRelativePath.split("/",1)[0],s=new t(o,!1);return a.forEach(e=>{let n=e.webkitRelativePath.split("/");n.shift();let i=n.pop(),a=n.reduce((e,n)=>(e._entries[n]||(e._entries[n]=new t(n,!1)),e._entries[n]),s);a._entries[i]=new r(e.name,e,!1)}),new i(s)}async function s(e){let{FileHandle:t}=await n.e(871).then(n.bind(n,20871)),{FileSystemFileHandle:r}=await Promise.resolve().then(n.bind(n,84427));return Array.from(e.files).map(e=>new r(new t(e.name,e,!1)))}}}]);