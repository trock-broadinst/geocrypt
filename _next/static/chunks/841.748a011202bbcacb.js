"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[841,950,481],{78481:function(e,t,i){i.r(t),i.d(t,{FileHandle:function(){return a},FolderHandle:function(){return o}});var r=i(54950);let{DISALLOWED:n}=r.errors;class s{constructor(e,t){this.writer=e,this.fileEntry=t}async write(e){if("object"==typeof e){if("write"===e.type){if(Number.isInteger(e.position)&&e.position>=0&&(this.writer.seek(e.position),this.writer.position!==e.position&&(await new Promise((t,i)=>{this.writer.onwriteend=t,this.writer.onerror=i,this.writer.truncate(e.position)}),this.writer.seek(e.position))),!("data"in e))throw new DOMException("Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. write requires a data argument","SyntaxError");e=e.data}else if("seek"===e.type){if(Number.isInteger(e.position)&&e.position>=0){if(this.writer.seek(e.position),this.writer.position!==e.position)throw new DOMException("seeking position failed","InvalidStateError");return}throw new DOMException("Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. seek requires a position argument","SyntaxError")}else if("truncate"===e.type)return new Promise(t=>{if(Number.isInteger(e.size)&&e.size>=0)this.writer.onwriteend=e=>t(),this.writer.truncate(e.size);else throw new DOMException("Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. truncate requires a size argument","SyntaxError")})}await new Promise((t,i)=>{this.writer.onwriteend=t,this.writer.onerror=i,this.writer.write(new Blob([e]))})}close(){return new Promise(this.fileEntry.file.bind(this.fileEntry))}}class a{constructor(e,t=!0){this.file=e,this.kind="file",this.writable=t,this.readable=!0}get name(){return this.file.name}isSameEntry(e){return this.file.toURL()===e.file.toURL()}getFile(){return new Promise(this.file.file.bind(this.file))}createWritable(e){if(!this.writable)throw new DOMException(...n);return new Promise((t,i)=>this.file.createWriter(i=>{!1===e.keepExistingData?(i.onwriteend=e=>t(new s(i,this.file)),i.truncate(0)):t(new s(i,this.file))},i))}}class o{constructor(e,t=!0){this.dir=e,this.writable=t,this.readable=!0,this.kind="directory",this.name=e.name}isSameEntry(e){return this.dir.fullPath===e.dir.fullPath}async *entries(){let e=this.dir.createReader(),t=await new Promise(e.readEntries.bind(e));for(let e of t)yield[e.name,e.isFile?new a(e,this.writable):new o(e,this.writable)]}getDirectoryHandle(e,t){return new Promise((i,r)=>{this.dir.getDirectory(e,t,e=>{i(new o(e))},r)})}getFileHandle(e,t){return new Promise((i,r)=>this.dir.getFile(e,t,e=>i(new a(e)),r))}async removeEntry(e,t){let i=await this.getDirectoryHandle(e,{create:!1}).catch(t=>"TypeMismatchError"===t.name?this.getFileHandle(e,{create:!1}):t);if(i instanceof Error)throw i;return new Promise((e,r)=>{i instanceof o?t.recursive?i.dir.removeRecursively(()=>e(),r):i.dir.remove(()=>e(),r):i.file&&i.file.remove(()=>e(),r)})}}t.default=(e={})=>new Promise((t,i)=>window.webkitRequestFileSystem(e._persistent,0,e=>t(new o(e.root)),i))},54950:function(e,t,i){i.r(t),i.d(t,{config:function(){return n},errors:function(){return r},fromDataTransfer:function(){return s},getDirHandlesFromInput:function(){return a},getFileHandlesFromInput:function(){return o}});let r={INVALID:["seeking position failed.","InvalidStateError"],GONE:["A requested file or directory could not be found at the time an operation was processed.","NotFoundError"],MISMATCH:["The path supplied exists, but was not an entry of requested type.","TypeMismatchError"],MOD_ERR:["The object can not be modified in this way.","InvalidModificationError"],SYNTAX:e=>[`Failed to execute 'write' on 'UnderlyingSinkBase': Invalid params passed. ${e}`,"SyntaxError"],SECURITY:["It was determined that certain files are unsafe for access within a Web application, or that too many calls are being made on file resources.","SecurityError"],DISALLOWED:["The request is not allowed by the user agent or the platform in the current context.","NotAllowedError"]},n={writable:globalThis.WritableStream};async function s(e){console.warn("deprecated fromDataTransfer - use `dt.items[0].getAsFileSystemHandle()` instead");let[t,r,n]=await Promise.all([i.e(871).then(i.bind(i,20871)),i.e(481).then(i.bind(i,78481)),Promise.resolve().then(i.bind(i,54022))]),s=new t.FolderHandle("",!1);return s._entries=e.map(e=>e.isFile?new r.FileHandle(e,!1):new r.FolderHandle(e,!1)),new n.FileSystemDirectoryHandle(s)}async function a(e){let{FolderHandle:t,FileHandle:r}=await i.e(871).then(i.bind(i,20871)),{FileSystemDirectoryHandle:n}=await Promise.resolve().then(i.bind(i,54022)),s=Array.from(e.files),a=s[0].webkitRelativePath.split("/",1)[0],o=new t(a,!1);return s.forEach(e=>{let i=e.webkitRelativePath.split("/");i.shift();let n=i.pop(),s=i.reduce((e,i)=>(e._entries[i]||(e._entries[i]=new t(i,!1)),e._entries[i]),o);s._entries[n]=new r(e.name,e,!1)}),new n(o)}async function o(e){let{FileHandle:t}=await i.e(871).then(i.bind(i,20871)),{FileSystemFileHandle:r}=await Promise.resolve().then(i.bind(i,84427));return Array.from(e.files).map(e=>new r(new t(e.name,e,!1)))}}}]);