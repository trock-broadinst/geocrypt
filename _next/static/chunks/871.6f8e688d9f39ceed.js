"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[871],{20871:function(e,i,t){t.r(i),t.d(i,{FileHandle:function(){return p},FolderHandle:function(){return y},Sink:function(){return _}});var s=t(54950),n=t(93642);let{File:r,Blob:h,DOMException:o}=n.Z,{INVALID:l,GONE:a,MISMATCH:f,MOD_ERR:w,SYNTAX:c,SECURITY:d,DISALLOWED:u}=s.errors;class _{constructor(e,i){this.fileHandle=e,this.file=i,this.size=i.size,this.position=0}write(e){let i=this.file;if("object"==typeof e){if("write"===e.type){if(Number.isInteger(e.position)&&e.position>=0&&(this.position=e.position,this.size<e.position&&(this.file=new r([this.file,new ArrayBuffer(e.position-this.size)],this.file.name,this.file))),!("data"in e))throw new o(...c("write requires a data argument"));e=e.data}else if("seek"===e.type){if(Number.isInteger(e.position)&&e.position>=0){if(this.size<e.position)throw new o(...l);this.position=e.position;return}throw new o(...c("seek requires a position argument"))}else if("truncate"===e.type){if(Number.isInteger(e.size)&&e.size>=0){i=e.size<this.size?new r([i.slice(0,e.size)],i.name,i):new r([i,new Uint8Array(e.size-this.size)],i.name),this.size=i.size,this.position>i.size&&(this.position=i.size),this.file=i;return}throw new o(...c("truncate requires a size argument"))}}e=new h([e]);let t=this.file,s=t.slice(0,this.position),n=t.slice(this.position+e.size),a=this.position-s.size;a<0&&(a=0),t=new r([s,new Uint8Array(a),e,n],t.name),this.size=t.size,this.position+=e.size,this.file=t}close(){if(this.fileHandle._deleted)throw new o(...a);this.fileHandle._file=this.file,this.file=this.position=this.size=null,this.fileHandle.onclose&&this.fileHandle.onclose(this.fileHandle)}}class p{constructor(e="",i=new r([],e),t=!0){this._file=i,this.name=e,this.kind="file",this._deleted=!1,this.writable=t,this.readable=!0}async getFile(){if(this._deleted)throw new o(...a);return this._file}async createWritable(e){if(!this.writable)throw new o(...u);if(this._deleted)throw new o(...a);let i=e.keepExistingData?await this.getFile():new r([],this.name);return new _(this,i)}async isSameEntry(e){return this===e}async _destroy(){this._deleted=!0,this._file=null}}class y{constructor(e,i=!0){this.name=e,this.kind="directory",this._deleted=!1,this._entries={},this.writable=i,this.readable=!0}async *entries(){if(this._deleted)throw new o(...a);yield*Object.entries(this._entries)}async isSameEntry(e){return this===e}async getDirectoryHandle(e,i){if(this._deleted)throw new o(...a);let t=this._entries[e];if(t){if(!(t instanceof p))return t;throw new o(...f)}if(i.create)return this._entries[e]=new y(e);throw new o(...a)}async getFileHandle(e,i){let t=this._entries[e],s=t instanceof p;if(t&&s)return t;if(t&&!s)throw new o(...f);if(!t&&!i.create)throw new o(...a);if(!t&&i.create)return this._entries[e]=new p(e)}async removeEntry(e,i){let t=this._entries[e];if(!t)throw new o(...a);await t._destroy(i.recursive),delete this._entries[e]}async _destroy(e){for(let i of Object.values(this._entries)){if(!e)throw new o(...w);await i._destroy(e)}this._entries={},this._deleted=!0}}let z=new y("");i.default=()=>z}}]);